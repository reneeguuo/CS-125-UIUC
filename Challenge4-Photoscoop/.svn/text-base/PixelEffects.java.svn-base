//UIUC CS125 FALL 2013 MP. File: PixelEffects.java, CS125 Project: Challenge4-Photoscoop, Version: 2013-10-05T03:23:21-0500.804813457

/* A class to implement the various pixel effects.
 *
 * Todo: Put your netid (i.e. username) in the line below
 * 
 * @author buf3
 */
public class PixelEffects {

	/** Copies the source image to a new 2D integer image */
	public static int[][] copy(int[][] source) {
		// Create a NEW 2D integer array and copy the colors across
		// See redeye code below
		int[][] array = new int[source.length][source[0].length];
		for (int i=0; i<source.length; i++) {
			for (int j=0; j<source[0].length; j++) {
				array[i][j] = source[i][j];
			}
		}
		return array; // Fix Me
	}
	/**
	 * Resize the array image to the new width and height
	 * You are going to need to figure out how to map between a pixel
	 * in the destination image to a pixel in the source image
	 * @param source
	 * @param newWidth
	 * @param newHeight
	 * @return
	 */
	public static int[][] resize(int[][] source, int newWidth, int newHeight) {
		int[][] array = new int[newWidth][newHeight];
		double ratioX = (double)newWidth/source.length;
		double ratioY = (double)newHeight/source[0].length;
		for (int i=0; i<newWidth; i++) {
			for (int j=0; j<newHeight; j++) {
				int x = (int)(i/ratioX);
				int y = (int)(j/ratioY);
				array[i][j] = source[x][y];
			}
		}
		return array;
		// Hints: Use two nested for loops between 0... newWidth-1 and 0.. newHeight-1 inclusive.
		// Hint: You can just use relative proportion to calculate the x (or y coordinate)  in the original image.
		// For example if you're setting a pixel halfway across the image, you should be reading half way across the original image too.
	}

	/**
	 * Half the size of the image. This method should be just one line! Just
	 * delegate the work to resize()!
	 */
	public static int[][] half(int[][] source) {
		return resize(source, source.length/2, source[0].length/2);
	}
	
	/**
	 * Create a new image array that is the same dimesions of the reference
	 * array. The array may be larger or smaller than the source. Hint -
	 * this methods should be just one line - delegate the work to resize()!
	 * 
	 * @param source
	 *            the source image
	 * @param reference
	 * @return the resized image
	 */
	public static int[][] resize(int[][] source, int[][] reference) {
		return resize(source, reference.length, reference[0].length);
	}

	/** Flip the image vertically */
	public static int[][] flip(int[][] source) {
		int[][] result = new int[source.length][source[0].length];
		for (int i=0; i<source.length; i++) {
			for (int j=0; j<source[0].length; j++) {
				result[i][j] = source[i][source[0].length-1-j];
			}
		}
		return result;
	}

	/** Reverse the image horizontally */
	public static int[][] mirror(int[][] source) {
		int[][] result = new int[source.length][source[0].length];
		for (int i=0; i<source.length; i++) {
			for (int j=0; j<source[0].length; j++) {
				result[i][j] = source[source.length-1-i][j];
			}
		}
		return result;
	}

	/** Rotate the image */
	public static int[][] rotateLeft(int[][] source) {
		int[][] result = new int[source[0].length][source.length];
		for (int i=0; i<result.length; i++) {
			for (int j=0; j<result[0].length; j++) {
				result[i][j] = source[result[0].length-1-j][i];
			}
		}
		return result;
	}

	/** Merge the red,blue,green components from two images */
	public static int[][] merge(int[][] sourceA, int[][] sourceB) {

		// The output should be the same size as the input. Scale (x,y) values
		// when reading the background
		// (e.g. so the far right pixel of the source is merged with the
		// far-right pixel ofthe background).
		int[][] resizeOfA = resize(sourceA,sourceB);
		int[][] result = new int[resizeOfA.length][resizeOfA[0].length];
		int rgbA,rgbB;
		int redA,redB,greenA,greenB,blueA,blueB;
		int red,green,blue;
		
		for(int i=0;i<resizeOfA.length; i++){
			for(int j=0;j<resizeOfA[0].length; j++){
				rgbA = sourceA[i][j];
				redA = RGBUtilities.toRed(rgbA);
				greenA = RGBUtilities.toGreen(rgbA);
				blueA = RGBUtilities.toBlue(rgbA);
				
				rgbB = sourceB[i][j];
				redB = RGBUtilities.toRed(rgbB);
				greenB = RGBUtilities.toGreen(rgbB);
				blueB = RGBUtilities.toBlue(rgbB);
				
				red = (redA + redB)/2;
				green = (greenA + greenB)/2;
				blue = (blueA + blueB)/2;
				
				result[i][j] = RGBUtilities.toRGB(red, green, blue);
			}
		}
		return result;
	}

	/**
	 * Replace the green areas of the foreground image with parts of the back
	 * image
	 */
	public static int[][] chromaKey(int[][] foreImage, int[][] backImage) {

		int wb = backImage.length;
		int hb = backImage[0].length;
		int wf = foreImage.length;
		int hf = foreImage[0].length;
		int[][] result = new int[wf][hf];
		
		if((hb!=hf)||(wb!=wf)){
			backImage = resize(backImage, foreImage);
		}

		for(int i=0; i<wf; i++) {
			for(int j=0; j<hf; j++) {
					result[i][j] = foreImage[i][j];
				}
			}
		
		for(int i=0; i<wf; i++) {
			for(int j=0; j<hf; j++) {
				int r = RGBUtilities.toRed(result[i][j]);
				int g = RGBUtilities.toGreen(result[i][j]);
				int b = RGBUtilities.toBlue(result[i][j]);
				double ratio = (double)g/(r+g+b);
				if((g>200 && ratio > 0.4) || ratio>0.9) {
					result[i][j] = backImage[i][j];
				}
			}
		}
		// If the image has a different size than the background use the
		// resize() method
		// create an image the same as the background size.
		return result;
		}

	/** Removes "redeye" caused by a camera flash. sourceB is not used */
	public static int[][] redeye(int[][] source, int[][] sourceB) {

		int width = source.length, height = source[0].length;
		int[][] result = new int[width][height];
		for (int i = 0; i < width; i++)
			for (int j = 0; j < height; j++) {
				int rgb = source[i][j];
				int red = RGBUtilities.toRed(rgb);
				int green = RGBUtilities.toGreen(rgb);
				int blue = RGBUtilities.toBlue(rgb);
				if (red > 4 * Math.max(green, blue) && red > 64)
					red = green = blue = 0;		
				result[i][j] = RGBUtilities.toRGB(red, green, blue);
			}

		return result;
	}

	/* Upto you! do something fun to the image */
	public static int[][] funky(int[][] source, int[][] sourceB) {

		sourceB = resize(sourceB, source);
		int[][] result = new int[source.length][source[0].length];
		result = copy(source);

		for (int i=0; i<source.length/2; i++) {
			for (int j=0; j<source[0].length; j++) {
				result[i][j] = sourceB[i][j];
			}
		}
		// You need to invent your own image effect
		// Minimum boring requirements to pass autograder:
		
		// Does not ask for any user input and returns a new 2D array
		// Todo: remove this return null
		return result;
	}
}
